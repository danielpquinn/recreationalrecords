# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Artist {
  id: ID!
  legacyId: String
  name: String
}

input ArtistWhereUniqueInput {
  id: ID
}

input ArtistWhereInput {
  AND: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
  id: IDFilter
  legacyId: StringFilter
  name: StringFilter
}

input ArtistOrderByInput {
  id: OrderDirection
  legacyId: OrderDirection
  name: OrderDirection
}

input ArtistUpdateInput {
  legacyId: String
  name: String
}

input ArtistUpdateArgs {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateInput!
}

input ArtistCreateInput {
  legacyId: String
  name: String
}

type Genre {
  id: ID!
  legacyId: String
  name: String
}

input GenreWhereUniqueInput {
  id: ID
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  id: IDFilter
  legacyId: StringFilter
  name: StringFilter
}

input GenreOrderByInput {
  id: OrderDirection
  legacyId: OrderDirection
  name: OrderDirection
}

input GenreUpdateInput {
  legacyId: String
  name: String
}

input GenreUpdateArgs {
  where: GenreWhereUniqueInput!
  data: GenreUpdateInput!
}

input GenreCreateInput {
  legacyId: String
  name: String
}

type Release {
  id: ID!
  legacyId: String
  title: String
  slug: String
  publishedDate: DateTime
  image: ImageFieldOutput
  description: String
  artist: Artist
  tracks(where: TrackWhereInput! = {}, orderBy: [TrackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrackWhereUniqueInput): [Track!]
  tracksCount(where: TrackWhereInput! = {}): Int
  genres(where: GenreWhereInput! = {}, orderBy: [GenreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenreWhereUniqueInput): [Genre!]
  genresCount(where: GenreWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ReleaseWhereUniqueInput {
  id: ID
  slug: String
}

input ReleaseWhereInput {
  AND: [ReleaseWhereInput!]
  OR: [ReleaseWhereInput!]
  NOT: [ReleaseWhereInput!]
  id: IDFilter
  legacyId: StringFilter
  title: StringFilter
  slug: StringFilter
  publishedDate: DateTimeNullableFilter
  description: StringFilter
  artist: ArtistWhereInput
  tracks: TrackManyRelationFilter
  genres: GenreManyRelationFilter
}

input TrackManyRelationFilter {
  every: TrackWhereInput
  some: TrackWhereInput
  none: TrackWhereInput
}

input GenreManyRelationFilter {
  every: GenreWhereInput
  some: GenreWhereInput
  none: GenreWhereInput
}

input ReleaseOrderByInput {
  id: OrderDirection
  legacyId: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  publishedDate: OrderDirection
  description: OrderDirection
}

input ReleaseUpdateInput {
  legacyId: String
  title: String
  slug: String
  publishedDate: DateTime
  image: ImageFieldInput
  description: String
  artist: ArtistRelateToOneForUpdateInput
  tracks: TrackRelateToManyForUpdateInput
  genres: GenreRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ArtistRelateToOneForUpdateInput {
  create: ArtistCreateInput
  connect: ArtistWhereUniqueInput
  disconnect: Boolean
}

input TrackRelateToManyForUpdateInput {
  disconnect: [TrackWhereUniqueInput!]
  set: [TrackWhereUniqueInput!]
  create: [TrackCreateInput!]
  connect: [TrackWhereUniqueInput!]
}

input GenreRelateToManyForUpdateInput {
  disconnect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  create: [GenreCreateInput!]
  connect: [GenreWhereUniqueInput!]
}

input ReleaseUpdateArgs {
  where: ReleaseWhereUniqueInput!
  data: ReleaseUpdateInput!
}

input ReleaseCreateInput {
  legacyId: String
  title: String
  slug: String
  publishedDate: DateTime
  image: ImageFieldInput
  description: String
  artist: ArtistRelateToOneForCreateInput
  tracks: TrackRelateToManyForCreateInput
  genres: GenreRelateToManyForCreateInput
}

input ArtistRelateToOneForCreateInput {
  create: ArtistCreateInput
  connect: ArtistWhereUniqueInput
}

input TrackRelateToManyForCreateInput {
  create: [TrackCreateInput!]
  connect: [TrackWhereUniqueInput!]
}

input GenreRelateToManyForCreateInput {
  create: [GenreCreateInput!]
  connect: [GenreWhereUniqueInput!]
}

type Track {
  id: ID!
  legacyId: String
  title: String
  artist: Artist
  mp3: FileFieldOutput
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input TrackWhereUniqueInput {
  id: ID
}

input TrackWhereInput {
  AND: [TrackWhereInput!]
  OR: [TrackWhereInput!]
  NOT: [TrackWhereInput!]
  id: IDFilter
  legacyId: StringFilter
  title: StringFilter
  artist: ArtistWhereInput
}

input TrackOrderByInput {
  id: OrderDirection
  legacyId: OrderDirection
  title: OrderDirection
}

input TrackUpdateInput {
  legacyId: String
  title: String
  artist: ArtistRelateToOneForUpdateInput
  mp3: FileFieldInput
}

input FileFieldInput {
  upload: Upload!
}

input TrackUpdateArgs {
  where: TrackWhereUniqueInput!
  data: TrackUpdateInput!
}

input TrackCreateInput {
  legacyId: String
  title: String
  artist: ArtistRelateToOneForCreateInput
  mp3: FileFieldInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createArtist(data: ArtistCreateInput!): Artist
  createArtists(data: [ArtistCreateInput!]!): [Artist]
  updateArtist(where: ArtistWhereUniqueInput!, data: ArtistUpdateInput!): Artist
  updateArtists(data: [ArtistUpdateArgs!]!): [Artist]
  deleteArtist(where: ArtistWhereUniqueInput!): Artist
  deleteArtists(where: [ArtistWhereUniqueInput!]!): [Artist]
  createGenre(data: GenreCreateInput!): Genre
  createGenres(data: [GenreCreateInput!]!): [Genre]
  updateGenre(where: GenreWhereUniqueInput!, data: GenreUpdateInput!): Genre
  updateGenres(data: [GenreUpdateArgs!]!): [Genre]
  deleteGenre(where: GenreWhereUniqueInput!): Genre
  deleteGenres(where: [GenreWhereUniqueInput!]!): [Genre]
  createRelease(data: ReleaseCreateInput!): Release
  createReleases(data: [ReleaseCreateInput!]!): [Release]
  updateRelease(where: ReleaseWhereUniqueInput!, data: ReleaseUpdateInput!): Release
  updateReleases(data: [ReleaseUpdateArgs!]!): [Release]
  deleteRelease(where: ReleaseWhereUniqueInput!): Release
  deleteReleases(where: [ReleaseWhereUniqueInput!]!): [Release]
  createTrack(data: TrackCreateInput!): Track
  createTracks(data: [TrackCreateInput!]!): [Track]
  updateTrack(where: TrackWhereUniqueInput!, data: TrackUpdateInput!): Track
  updateTracks(data: [TrackUpdateArgs!]!): [Track]
  deleteTrack(where: TrackWhereUniqueInput!): Track
  deleteTracks(where: [TrackWhereUniqueInput!]!): [Track]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  artist(where: ArtistWhereUniqueInput!): Artist
  artists(where: ArtistWhereInput! = {}, orderBy: [ArtistOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ArtistWhereUniqueInput): [Artist!]
  artistsCount(where: ArtistWhereInput! = {}): Int
  genre(where: GenreWhereUniqueInput!): Genre
  genres(where: GenreWhereInput! = {}, orderBy: [GenreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenreWhereUniqueInput): [Genre!]
  genresCount(where: GenreWhereInput! = {}): Int
  release(where: ReleaseWhereUniqueInput!): Release
  releases(where: ReleaseWhereInput! = {}, orderBy: [ReleaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReleaseWhereUniqueInput): [Release!]
  releasesCount(where: ReleaseWhereInput! = {}): Int
  track(where: TrackWhereUniqueInput!): Track
  tracks(where: TrackWhereInput! = {}, orderBy: [TrackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrackWhereUniqueInput): [Track!]
  tracksCount(where: TrackWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
